{"version":3,"sources":["components/Carousel.js","components/Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["CarouselPage","activeItem","length","showControls","showIndicators","className","itemId","src","alt","overlay","NavbarPage","state","collapseID","toggleCollapse","setState","prevState","color","light","expand","onClick","this","id","isOpen","navbar","right","to","icon","nav","caret","href","Component","App","Navbar","Carousel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bd0688d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBCarousel, MDBCarouselCaption, MDBCarouselInner, MDBCarouselItem, MDBView, MDBMask } from\n\"mdbreact\";\n\nconst CarouselPage = () => {\n  return (\n      <MDBCarousel\n      activeItem={1}\n      length={3}\n      showControls={true}\n      showIndicators={true}\n      className=\"z-depth-1\"\n    >\n      <MDBCarouselInner>\n        <MDBCarouselItem itemId=\"1\">\n          <MDBView>\n            <img\n              className=\"d-block w-100\"\n              src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(68).jpg\"\n              alt=\"First slide\"\n            />\n          <MDBMask overlay=\"black-light\" />\n          </MDBView>\n          <MDBCarouselCaption>\n            <h3 className=\"h3-responsive\">Light mask</h3>\n            <p>First text</p>\n          </MDBCarouselCaption>\n        </MDBCarouselItem>\n        <MDBCarouselItem itemId=\"2\">\n          <MDBView>\n            <img\n              className=\"d-block w-100\"\n              src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(6).jpg\"\n              alt=\"Second slide\"\n            />\n          <MDBMask overlay=\"black-strong\" />\n          </MDBView>\n          <MDBCarouselCaption>\n            <h3 className=\"h3-responsive\">Strong mask</h3>\n            <p>Second text</p>\n          </MDBCarouselCaption>\n        </MDBCarouselItem>\n        <MDBCarouselItem itemId=\"3\">\n          <MDBView>\n            <img\n              className=\"d-block w-100\"\n              src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(9).jpg\"\n              alt=\"Third slide\"\n            />\n          <MDBMask overlay=\"black-slight\" />\n          </MDBView>\n          <MDBCarouselCaption>\n            <h3 className=\"h3-responsive\">Slight Mast</h3>\n            <p>Third text</p>\n          </MDBCarouselCaption>\n        </MDBCarouselItem>\n      </MDBCarouselInner>\n    </MDBCarousel>\n  );\n}\n\nexport default CarouselPage;","import React, { Component } from \"react\";\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBDropdown,\nMDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon } from \"mdbreact\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass NavbarPage extends Component {\n    state = {\n    collapseID: \"\"\n    };\n\n    toggleCollapse = collapseID => () =>\n    this.setState(prevState => ({\n    collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n    }));\n\n    render() {\n        return (\n            <Router>\n                <MDBNavbar color=\"white\" light expand=\"md\">\n                    <MDBNavbarBrand>\n                    <strong className=\"black-text\">Rommel Jay San Jose</strong>\n                    </MDBNavbarBrand>\n                    <MDBNavbarToggler onClick={this.toggleCollapse(\"navbarCollapse3\")} />\n                    <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.collapseID} navbar>\n                        <MDBNavbarNav right>\n                            <MDBNavItem>\n                                <MDBNavLink className=\"waves-effect waves-light black-text\" to=\"#!\">\n                                <MDBIcon icon=\"user\" className=\"mr-1\" />About</MDBNavLink>\n                            </MDBNavItem>\n                            <MDBNavItem>\n                                <MDBNavLink className=\"waves-effect waves-light black-text\" to=\"#!\">\n                                <MDBIcon icon=\"envelope\" className=\"mr-1\" />Contact</MDBNavLink>\n                            </MDBNavItem>\n                            <MDBNavItem>\n                                <MDBDropdown>\n                                    <MDBDropdownToggle nav caret className=\"black-text\">\n                                        <MDBIcon icon=\"folder-open\" className=\"mr-1\" />Portfolio\n                                    </MDBDropdownToggle>\n                                    <MDBDropdownMenu className=\"dropdown-default\" right>\n                                        <MDBDropdownItem href=\"#!\">Design . Web</MDBDropdownItem>\n                                        <MDBDropdownItem href=\"#!\">Design . Residential</MDBDropdownItem>\n                                        <MDBDropdownItem href=\"#!\">ArchViz</MDBDropdownItem>\n                                        <MDBDropdownItem href=\"#!\">Photography</MDBDropdownItem>\n                                    </MDBDropdownMenu>\n                                </MDBDropdown>\n                            </MDBNavItem>\n                        </MDBNavbarNav>\n                    </MDBCollapse>\n                </MDBNavbar>\n            </Router>\n            \n        );\n    }\n}\n\nexport default NavbarPage;","import React, { Component } from \"react\";\r\nimport { MDBContainer} from \"mdbreact\";\r\nimport CarouselPage from \"./components/Carousel\"\r\nimport NavbarPage from \"./components/Navbar\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavbarPage />\r\n        <CarouselPage />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}